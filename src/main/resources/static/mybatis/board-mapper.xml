<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : package + classname -->
<mapper namespace="com.ebstudy.board.v4.repository.BoardMapper">
    <resultMap type="com.ebstudy.board.v4.dto.PostDTO" id="mapPostDTO">
        <result property="postId" column="post_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="createdDate" column="created_date"/>
        <result property="modifiedDate" column="modified_date"/>
        <result property="fileFlag" column="file_flag"/>
    </resultMap>

    <resultMap id="mapCategoryDTO" type="com.ebstudy.board.v4.dto.CategoryDTO">
        <result property="categoryId" column="category_id"/>
    </resultMap>

    <sql id="search">
        <if test="startDate != null and endDate != null">
            AND created_date BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="categoryId != null and categoryId != 0">
            AND category_id = #{categoryId}
        </if>
        <if test="keyword != null">
            AND (title LIKE CONCAT('%', #{keyword}, '%')
            OR content LIKE CONCAT('%', #{keyword}, '%')
            OR author LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </sql>

    <!--List<PostDTO> 형식으로 검색 조건에 해당하는 startPostNumber 번째 게시글부터 10개를 뽑아 리스트를 반환-->
    <select id="getPostList" parameterType="PaginationDTO" resultType="PostDTO"
            resultMap="mapPostDTO">
        <!--db 성능에 대해서는 성능이 실제로 문제가 될 때 고려-->
        <!--TODO: 3/11 리뷰: View를 공부해서 사용해 보자, where delete_flag가 따라다니는걸 막기 위해서 쓰는 것(create view v-board, user와 admin의 경우에 delete_flag-->
        SELECT A.*,
               B.category,
               EXISTS(
                   SELECT 1
                   FROM files
                   WHERE post_id = A.post_id
                   ) AS file_flag

        FROM posts A
            LEFT JOIN categorys B
                ON A.category_id = B.category_id

        WHERE A.delete_flag = false
        <include refid="search"/>

        ORDER BY A.post_id DESC LIMIT #{startPostNumber}, 10
    </select>

    <!--현재 데이터베이스에 존재하는 게시글의 총 개수를 반환-->
    <select id="getPostCount" parameterType="SearchDTO" resultType="int">
        SELECT COUNT(post_id)

        FROM posts

        WHERE delete_flag = false
        <include refid="search"/>
    </select>

    <!--CDATA를 쓰면 sql 안에서 < >같은 문자를 써도 xml코드로 인식하지 않는다-->
    <!--요청한 postId에 해당하는 게시글을 반환-->
    <select id="getPost" parameterType="long" resultType="PostDTO"
            resultMap="mapPostDTO">
        SELECT *

        FROM posts A
                 LEFT JOIN categorys B
                     ON A.category_id = B.category_id

        WHERE post_id = #{postId} AND delete_flag = false
    </select>
    
    <!--카테고리 리스트를 반환-->
    <select id="getCategoryList" resultType="CategoryDTO"
            resultMap="mapCategoryDTO">
        SELECT *
        FROM categorys
    </select>

    <!--  useGeneratedKeys의 keyProperty는 dto에 담겨 반환되므로 db PK에 해당하는 dto의 필드명을 써야 한다.   -->
    <!--PostDTO 객체에 담긴 게시글 값을 저장-->
    <insert id="savePost" parameterType="PostDTO" useGeneratedKeys="true"
            keyProperty="postId">
        INSERT INTO posts(title, category_id, author, content, passwd,
                          created_date, modified_date)

        VALUES (#{title}, #{categoryId}, #{author}, #{content}, #{passwd},
                #{createdDate}, #{modifiedDate})
    </insert>

    <!--postId값의 게시글을 수정-->
    <update id="updatePost" parameterType="PostDTO">
        UPDATE posts

        SET author        = #{author},
            passwd        = #{passwd},
            title         = #{title},
            content       = #{content},
            modified_date = #{modifiedDate}

        WHERE post_id = #{postId}
    </update>

    <!--해당 postId값의 게시글을 삭제-->
    <update id="deletePost" parameterType="long">
        UPDATE posts

        SET delete_flag = true

        WHERE post_id = #{postId}
    </update>

    <!--postId값을 가진 열의 조회수를 증가-->
    <update id="increaseHits" parameterType="long">
        UPDATE posts

        SET hits = hits + 1

        WHERE post_id = #{postId}
    </update>
</mapper>

